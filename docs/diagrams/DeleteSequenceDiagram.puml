@startuml
!include style.puml
skinparam ArrowFontStyle plain
skinparam boxPadding 10

box Logic LOGIC_COLOR_T1
participant ":LogicManager" as LogicManager LOGIC_COLOR
participant ":ContactBookParser" as ContactBookParser LOGIC_COLOR
participant ":DeleteCommandParser" as DeleteCommandParser LOGIC_COLOR
participant "d:DeleteCommand" as DeleteCommand LOGIC_COLOR
end box

box Model MODEL_COLOR_T1
participant "m:Model" as Model MODEL_COLOR
end box

[-> LogicManager : execute("delete KEY")
activate LogicManager

LogicManager -> ContactBookParser : parseCommand("delete KEY")
activate ContactBookParser

create DeleteCommandParser
ContactBookParser -> DeleteCommandParser
activate DeleteCommandParser

DeleteCommandParser --> ContactBookParser
deactivate DeleteCommandParser

ContactBookParser -> DeleteCommandParser : parse("KEY")
activate DeleteCommandParser

DeleteCommandParser -> DeleteCommandParser : trimmedArgs = args.trim()

alt trimmedArgs is empty
    DeleteCommandParser --> ContactBookParser : ParseException
else trimmedArgs not empty
    DeleteCommandParser -> DeleteCommandParser : index = ParserUtil.parseIndex(trimmedArgs)

    alt index parsed
        create DeleteCommand
        DeleteCommandParser -> DeleteCommand : new DeleteCommand(index)
        activate DeleteCommand
        DeleteCommand --> DeleteCommandParser : command
        deactivate DeleteCommand
        DeleteCommandParser --> ContactBookParser : command
    else ParseException from index
        DeleteCommandParser -> DeleteCommandParser : name = ParserUtil.parseName(args)

        alt name parsed
            create DeleteCommand
            DeleteCommandParser -> DeleteCommand : new DeleteCommand(name)
            activate DeleteCommand
            DeleteCommand --> DeleteCommandParser : command
            deactivate DeleteCommand
            DeleteCommandParser --> ContactBookParser : command
        else name parsing fails
            DeleteCommandParser --> ContactBookParser : ParseException
        end
    end
end

deactivate DeleteCommandParser

alt command parsed successfully
    ContactBookParser --> LogicManager : command
    deactivate ContactBookParser

    LogicManager -> DeleteCommand : execute(model)
    activate DeleteCommand

    DeleteCommand -> DeleteCommand : identify target (index or name)

    alt target resolved
        DeleteCommand -> Model : deletePerson(target)
        activate Model
        Model --> DeleteCommand
        deactivate Model

        DeleteCommand --> LogicManager : CommandResult(success message)
    else target unresolved
        DeleteCommand --> LogicManager : CommandException
    end

    deactivate DeleteCommand

    [<-- LogicManager
    deactivate LogicManager
else invalid delete arguments
    ContactBookParser --> LogicManager : ParseException
    deactivate ContactBookParser

    [<-- LogicManager
    deactivate LogicManager
end
@enduml
